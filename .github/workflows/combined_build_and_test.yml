name: Combined Build and Test

on:
  workflow_call:
    inputs:
      build_versions:
        required: true
        type: string
      maps:
        required: true
        type: string
      max_required_byond_client:
        required: true
        type: string
      alternate_tests:
        required: false
        type: string
        default: "[]"

jobs:
  combined_build_and_test:
    name: Build & Test (${{ matrix.map }}; BYOND ${{ inputs.max_required_byond_client }})
    runs-on: [self-hosted]
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        map: ${{ fromJSON(inputs.maps).paths }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: ./.github/actions/setup_bun

      - name: Restore BYOND from Cache
        uses: ./.github/actions/restore_or_install_byond

      - name: Install required packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install zlib1g-dev:i386

      # Build steps (from setup_build_artifact.yml)
      - name: Compile
        run: |
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build.sh --ci dm -DCIBUILDING -DANSICOLORS -Werror -ITG0001 -I"loop_checks"

      - name: Setup variable for output path
        run: |
          OUTPUT_DIR="target"
          echo "OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV

      - name: Copy output files
        run: |
          bash tools/ci/copy_build_output.sh $OUTPUT_DIR
          cp -r $OUTPUT_DIR/* ./

      # Test steps (from run_integration_tests.yml)
      - name: Setup database
        env:
          MYSQL_CONFIG_FILE: tools/ci/mysql_config.cnf
        run: |
          sudo service mysql start
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} -e 'CREATE DATABASE tg_ci;'
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} tg_ci < SQL/tgstation_schema.sql
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} -e 'CREATE DATABASE tg_ci_prefixed;'
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} tg_ci_prefixed < SQL/tgstation_schema_prefixed.sql
          echo "Successful MySQL Database Setup"

      - name: Install rust-g
        run: |
          bash tools/ci/install_rust_g.sh

      - name: Install dreamluau
        run: |
          bash tools/ci/install_dreamluau.sh

      - name: Run Tests
        id: run_tests
        run: |
          source $HOME/BYOND/byond/bin/byondsetup
          bash tools/ci/run_server.sh ${{ matrix.map }}

      # NOTE: Can't upload - artifacts storage is not available
      # Screenshot uploads removed as part of the artifact optimization
      # - name: Upload screenshot tests
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test_artifacts_${{ matrix.map }}_${{ matrix.version.major }}_${{ matrix.version.minor }}
      #     path: data/screenshots_new/
      #     retention-days: 1

      - name: On test fail, write a step summary
        if: always() && steps.run_tests.outcome == 'failure'
        run: |
          # Get a JSON array of failed unit tests
          FAILED_UNIT_TESTS=$(jq 'to_entries | map(.value | select(.status == 1))' data/unit_tests.json)

          FAIL_COUNT=$(echo $FAILED_UNIT_TESTS | jq 'length')

          echo "# Test failures" >> $GITHUB_STEP_SUMMARY
          echo "$FAIL_COUNT tests failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for i in $( seq $FAIL_COUNT ); do
            CURRENT_FAIL=$(echo $FAILED_UNIT_TESTS | jq --arg i $i '.[($i | tonumber) - 1]')

            TEST=$(echo $CURRENT_FAIL | jq --raw-output '.name')

            echo "### $TEST" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo $CURRENT_FAIL | jq --raw-output '.message' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done

      - name: Check client Compatibility
        if: always()
        uses: tgstation/byond-client-compatibility-check@v3
        with:
          dmb-location: tgstation.dmb
          max-required-client-version: ${{ inputs.max_required_byond_client }}

  combined_alternate_build_and_test:
    name: Alt Build & Test (${{ matrix.map }}; BYOND ${{ matrix.major }}.${{ matrix.minor }})
    if: inputs.alternate_tests != '[]'
    runs-on: [self-hosted]
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(inputs.alternate_tests) }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: ./.github/actions/setup_bun

      - name: Restore BYOND from Cache
        uses: ./.github/actions/restore_or_install_byond
        with:
          major: ${{ matrix.major }}
          minor: ${{ matrix.minor }}

      - name: Install required packages
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install zlib1g-dev:i386

      # Build steps (from setup_build_artifact.yml)
      - name: Compile
        run: |
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build.sh --ci dm -DCIBUILDING -DANSICOLORS -Werror -ITG0001 -I"loop_checks"

      - name: Setup variable for output path
        run: |
          OUTPUT_DIR="target"
          echo "OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV

      - name: Copy output files
        run: |
          bash tools/ci/copy_build_output.sh $OUTPUT_DIR
          cp -r $OUTPUT_DIR/* ./

      # Test steps (from run_integration_tests.yml)
      - name: Setup database
        env:
          MYSQL_CONFIG_FILE: tools/ci/mysql_config.cnf
        run: |
          sudo service mysql start
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} -e 'CREATE DATABASE tg_ci;'
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} tg_ci < SQL/tgstation_schema.sql
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} -e 'CREATE DATABASE tg_ci_prefixed;'
          mysql --defaults-extra-file=${{ env.MYSQL_CONFIG_FILE }} tg_ci_prefixed < SQL/tgstation_schema_prefixed.sql
          echo "Successful MySQL Database Setup"

      - name: Install rust-g
        run: |
          bash tools/ci/install_rust_g.sh

      - name: Install dreamluau
        run: |
          bash tools/ci/install_dreamluau.sh

      - name: Run Tests
        id: run_tests
        run: |
          source $HOME/BYOND/byond/bin/byondsetup
          bash tools/ci/run_server.sh ${{ matrix.map }}

      # NOTE: Can't upload - artifacts storage is not available
      # Screenshot uploads removed as part of the artifact optimization
      # - name: Upload screenshot tests
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test_artifacts_${{ matrix.map }}_${{ matrix.major }}_${{ matrix.minor }}
      #     path: data/screenshots_new/
      #     retention-days: 1

      - name: On test fail, write a step summary
        if: always() && steps.run_tests.outcome == 'failure'
        run: |
          # Get a JSON array of failed unit tests
          FAILED_UNIT_TESTS=$(jq 'to_entries | map(.value | select(.status == 1))' data/unit_tests.json)

          FAIL_COUNT=$(echo $FAILED_UNIT_TESTS | jq 'length')

          echo "# Test failures" >> $GITHUB_STEP_SUMMARY
          echo "$FAIL_COUNT tests failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for i in $( seq $FAIL_COUNT ); do
            CURRENT_FAIL=$(echo $FAILED_UNIT_TESTS | jq --arg i $i '.[($i | tonumber) - 1]')

            TEST=$(echo $CURRENT_FAIL | jq --raw-output '.name')

            echo "### $TEST" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo $CURRENT_FAIL | jq --raw-output '.message' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done

      - name: Check client Compatibility
        if: always()
        uses: tgstation/byond-client-compatibility-check@v3
        with:
          dmb-location: tgstation.dmb
          max-required-client-version: ${{ matrix.max_client_version || inputs.max_required_byond_client }}
